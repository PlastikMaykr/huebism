:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;

  --pad: 1.5rem;
}

:root,
body {
  margin: 0;
}

body {
  overflow: hidden;
  min-width: 320px;
  /* min-height: 100vh; */
  height: 100vh;
  background-color: hsl(0, 0%, var(--bg-value, 50%));
  color: hsl(0, 0%, var(--fg-value, 95%));
}

.disabled {
  opacity: 0.5;
  filter: blur(1px);
  pointer-events: none;
}

p {
  margin: 0;
}

label {
  user-select: none;
}

select,
button,
input[type="range"] {
  cursor: pointer;
}

select:disabled,
button:disabled,
input[type="range"]:disabled {
  cursor: unset;
}

select {
  text-overflow: ellipsis;
  max-width: 40ch;
}

#grid {
  margin: 0 auto;
  max-width: 1600px;
  width: 100%;
  height: 100%;

  display: grid;
  grid-template-columns: auto minmax(0, 1fr) auto;
  grid-template-rows: auto 1fr auto;
  gap: 0.5em;
  /* TODO: media queries */
  grid-template-areas:
    "header header header"
    "lefttop center righttop"
    "leftdown bottom rightdown";
}

header {
  grid-area: header;
  padding: 0.75em var(--pad, 3em);
  background-color: #666;
}

.bottom-panel,
.left-panel,
.right-panel {
  z-index: 1;
}

.left-panel,
.right-panel {
  display: grid;
  grid-template-rows: 1fr auto;
  grid-template-columns: 260px;
  pointer-events: none;
}

.left-panel {
  grid-area: lefttop / lefttop / leftdown / leftdown;
}

.right-panel {
  grid-area: righttop / righttop / rightdown / rightdown;
}

.bottom-panel {
  padding: var(--pad);
  background-color: rgba(128, 128, 128, 0.75);

  grid-area: bottom;
  justify-self: center;
  border-radius: 1em 1em 0 0;
  max-width: 100%;
  width: fit-content;
  box-sizing: border-box;
}

.left-panel>div,
.right-panel>div {
  background-color: rgba(128, 128, 128, 0.75);
  padding: var(--pad);

  pointer-events: auto;
  /* overflow: hidden; */
  display: flex;
  flex-direction: column;
}

.left-panel>div {
  border-radius: 0 1em 1em 0;
}

.right-panel>div {
  border-radius: 1em 0 0 1em;
}

#plot-wrapper {
  grid-area: center;
  place-self: center;
}

#control-panel {
  align-self: center;
  gap: 1rem;
}

#hue-wheel-group {
  padding: 0.5em;
  overflow: visible;
}

#palette-panel {
  border-bottom-right-radius: 0;
  gap: 1em;
}

#lerp-panel {
  border-bottom-left-radius: 0;
  display: grid;
  gap: 1em;
}

#lerp-panel>div,
#palette-panel>div {
  display: flex;
  flex-direction: column;
}

#palette-preview-group {
  position: relative;
  max-width: 50vw;
}

#palette-gradient {
  position: absolute;
  width: 100%;
  height: var(--pad);
  bottom: calc(var(--pad) * -1);

  background-image: linear-gradient(90deg, var(--gradient, transparent));
}

#palette-preview {
  height: 100%;
  display: flex;
  grid-gap: inherit;
  overflow: auto;
  scrollbar-width: thin;

  position: relative;
}


#palette-preview:empty::before {
  content: '';
  padding: 3em 2em;
  
  outline: 2px solid white;
  outline-offset: -2px;
}

#palette-preview:empty::after {
  position: absolute;
  content: 'double click a dot to add to palette';
  inset:0;
  padding: 0.5em;
  font-size: 0.75rem;
  line-height: 1.2;
  text-align: center;
  overflow: auto;
  scrollbar-width: thin;
}

.swatch {
  background-color: var(--fill, transparent);
  padding: 3em 2em;
  cursor: pointer;
  position: relative;
}

.swatch.highlight {
  outline: 2px solid white;
  outline-offset: -2px;
}

/* TODO: swatch tooltip */

.swatch>.before {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 20px;
  left: -10px;
  /* background-color: rgba(255, 255, 255, 0.15); */
}

#add-color,
#lerp-color,
#drag-color,
#remove-color {
  user-select: none;
  font-weight: bolder;
  /* line-height: 100%; */
  font-size: 16px;
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;

  position: absolute;
  left: 50%;
  translate: -50% 0;
}

#add-color {
  cursor: copy;
  background-color: green;
  top: 5%;
}

#lerp-color {
  cursor: copy;
  background-color: gold;
  bottom: 5%;
}

#drag-color {
  cursor: grab;
  background-color: dodgerblue;
  top: 5%;
}

#drag-color:active {
  cursor: grabbing;
}

#remove-color {
  background-color: red;
  bottom: 5%;
}

#info-panel {
  align-self: center;
  border-radius: 0 0 0 1em;
  /* display: grid; */
  /* 
  overflow: hidden;
  display: flex;
  flex-direction: column;
   */
  position: relative;
  /* background-color: unset; */
  padding-top: calc(var(--pad) / 2);
}

#color-strip {
  color: #808080;
  /* position: absolute;
  inset: 0;
  background-color: rgba(128, 128, 128, 0.75);
  z-index: -1; */
  position: absolute;
  width: 100%;
  --pad: 30px;
  height: var(--pad);
  top: calc(var(--pad) * -1);
  left: 0;
  
  --radius: 1em;
  --fold: var(--pad);
  /* --fold: calc(var(--pad) - 5px);
  --hitbox: var(--pad); */
}

#color-strip > label {
  color: inherit;
  /* background-color: currentColor; */

  box-sizing: border-box;
  border: 1px solid transparent;
  background-image: 
    linear-gradient(currentColor, currentColor),
    linear-gradient(135deg, white, currentColor 50%);
  background-origin: border-box;
  background-clip:
    padding-box,
    border-box;
}

#chosen-swatch {
  color: inherit;
  background-color: currentColor;
  /* position: absolute;
  width: 100%;
  --pad: 30px;
  height: var(--pad);
  top: calc(var(--pad) * -1);
  left: 0; */
  /* 
  position: absolute;
  inset: 0;
  z-index: -1;
   */
}

.grid-row {
  /* overflow: hidden; */
  position: relative;
  display: flex;
}
/* 
#viz-label {
  background-color: darkgrey;
  border: 1px solid black;
  border-radius: 0.5em;
  padding: 0.1em;
  cursor: pointer;

  user-select: none;
  display: inline-block;
}

#viz-label:hover {
  background-color: #fff;
}

input:checked+#viz-label {
  background-color: #fff;
  box-shadow: inset 1px 2px 5px #777;
}

#viz-check {
  display: none;
} */

.input-wrapper {
  overflow: hidden;
  flex: 1;
  display: inline-flex;
  flex-direction: column;
}

#color-name {
  font-size: 105%;
  /* flex: 1; */
}

.gauge-grid {
  display: grid;
  grid-template-columns: max-content minmax(0, auto) 6ch;
  grid-column-gap: 0.5em;
}

.gauge {
  grid-column: span 3;
  display: grid;
  grid-template-columns: subgrid;
}

.gauge>* {
  margin: 0;
}

.first {
  margin-top: 0.5em;
}

fieldset {
  /* margin: 0.5em; */
  border-radius: 0.5em;

  display: grid;
  grid-template-columns: auto minmax(0, 1fr);
}

.setting {
  /* display: flex; */
  grid-column: span 2;
  display: grid;
  grid-template-columns: subgrid;
  gap: 0.5em;
}

.setting label {
  margin-right: 1em;
}

.plot {
  max-width: 1280px;
  --perspective-px: calc(var(--perspective, 4800) * 1px);
  --diameter-px: calc(var(--diameter, 10) * 1px);
  --dimension-px: calc(var(--dimension, 800) * 1px);
  --half: calc(var(--dimension-px, 400px) / 2);

  overflow: visible;
  transform-style: preserve-3d;
  perspective: var(--perspective-px);
  perspective-origin: var(--x, 50%) var(--y, 50%);
  transition: perspective-origin 50ms ease-in;
}

.hitbox {
  /* background-color: hsl(0, 0%, 100%); */
  /* opacity: 0.25; */
  position: absolute;
  inset: 0;
  transform-style: flat;
  transform: translateZ(calc(var(--half) * -1));
}

.cube {
  transform-style: preserve-3d;
  transform: rotateX(var(--X, 0deg)) rotateY(var(--Y, 0deg)) rotateZ(var(--Z, 0deg));
  /* transition: transform 50ms ease-in; */
}

.cube .side {
  position: absolute;
  width: var(--dimension-px);
  height: var(--dimension-px);
  /* background-color: var(--fill, white); */
  /* border: 2px solid white; */
  outline: 2px solid hsl(0, 0%, var(--fg-value, 95%));

  opacity: 0.15;
}

.cube .side.front {
  transform: translateZ(var(--half, 400px));
}

.cube .side.top {
  transform: rotateX(90deg) translateZ(var(--half, 400px));
}

.cube .side.right {
  transform: rotateY(90deg) translateZ(var(--half, 400px));
}

.cube .side.left {
  transform: rotateY(-90deg) translateZ(var(--half, 400px));
}

.cube .side.bottom {
  transform: rotateX(-90deg) translateZ(var(--half, 400px));
}

.cube .side.back {
  transform: rotateY(-180deg) translateZ(var(--half, 400px));
}

.plot,
.cube,
.side {
  pointer-events: none;
}

.hitbox,
.dot {
  pointer-events: all;
}

.dot {
  cursor: pointer;
  position: absolute;
  border-radius: 50%;
  width: var(--diameter-px);
  height: var(--diameter-px);
  background-color: var(--fill);
  transform:
    translateX(var(--x)) translateY(var(--y)) translateZ(var(--z)) rotateX(var(--rot-x, 0deg)) rotateY(var(--rot-y, 0deg));
}

/* 
// TODO: change transforms origin to center and add border without affecting the position
.dot {
  translate: -50% -50%;
  box-sizing: content-box;
  border: 5px solid white;
}
*/

.dot.custom {
  cursor: grab;
}

.dot.highlight {
  outline: 3px solid rgba(255, 255, 255, 0.5);
  outline-offset: 5px;
}